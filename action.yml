name: 'HCP Terraform Workspace Setup'
description: Checks for a Terraform Cloud workspace, creates it if missing, and associates variable sets with it.

inputs:
  tfc_hostname:
    description: 'HCP Terraform hostname (default: https://app.terraform.io)'
    required: false
    default: 'app.terraform.io'
  tfc_organization:
    description: 'HCP Terraform organization name'
    required: true
  tfc_workspace:
    description: 'HCP Terraform workspace name'
    required: true
  tfc_project:
    description: 'HCP Terraform project name to associate with the workspace'
    required: true
  tfc_token:
    description: 'HCP Terraform API token'
    required: true

outputs:
  workspace_id:
    description: The ID of the created or existing workspace
    value: ${{ steps.ensure_workspace.outputs.workspace_id }}

runs:
  using: 'composite'
  steps:
    - name: Lookup Project ID from Project Name
      id: get_project_id
      shell: bash
      env:
        TFC_HOSTNAME: ${{ inputs.tfc_hostname }}
        TFC_ORG: ${{ inputs.tfc_organization }}
        TFC_PROJECT_NAME: ${{ inputs.tfc_project }}
        TFC_TOKEN: ${{ inputs.tfc_token }}
      run: |
        echo "üîç Fetching project ID for project '$TFC_PROJECT_NAME' in org '$TFC_ORG'..."

        PROJECTS_URL="https://$TFC_HOSTNAME/api/v2/organizations/$TFC_ORG/projects"

        response=$(curl -sS \
          --header "Authorization: Bearer $TFC_TOKEN" \
          --header "Content-Type: application/vnd.api+json" \
          "$PROJECTS_URL")

        project_id=$(echo "$response" | jq -r \
          --arg NAME "$TFC_PROJECT_NAME" \
          '.data[] | select(.attributes.name == $NAME) | .id')

        if [[ -z "$project_id" || "$project_id" == "null" ]]; then
          echo "‚ùå Project '$TFC_PROJECT_NAME' not found."
          exit 1
        fi

        echo "‚úÖ Found project ID: $project_id"
        echo "project_id=$project_id" >> "$GITHUB_OUTPUT"

    - name: Ensure Workspace Exists and Extract ID
      id: ensure_workspace
      shell: bash
      env:
        TFC_HOSTNAME: ${{ inputs.tfc_hostname }}
        TFC_ORG: ${{ inputs.tfc_organization }}
        TFC_WORKSPACE: ${{ inputs.tfc_workspace }}
        TFC_TOKEN: ${{ inputs.tfc_token }}
        TFC_PROJECT_ID: ${{ steps.get_project_id.outputs.project_id }}
      run: |
        set -e

        echo "üîç Checking if workspace '$TFC_WORKSPACE' exists in organization '$TFC_ORG'..."

        WORKSPACE_URL="https://$TFC_HOSTNAME/api/v2/organizations/$TFC_ORG/workspaces/$TFC_WORKSPACE"
        response_code=$(curl -sS -o workspace_response.json -w "%{http_code}" \
          --header "Authorization: Bearer $TFC_TOKEN" \
          --header "Content-Type: application/vnd.api+json" \
          "$WORKSPACE_URL")

        if [[ "$response_code" == "404" ]]; then
          echo "üÜï Workspace not found. Creating workspace '$TFC_WORKSPACE'..."

          payload=$(jq -n \
            --arg name "$TFC_WORKSPACE" \
            --arg project_id "$TFC_PROJECT_ID" \
            '{
              data: {
                type: "workspaces",
                attributes: {
                  name: $name
                },
                relationships: {
                  project: {
                    data: {
                      id: $project_id,
                      type: "projects"
                    }
                  }
                }
              }
            }')

          create_response=$(curl -sS \
            --header "Authorization: Bearer $TFC_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data "$payload" \
            "https://$TFC_HOSTNAME/api/v2/organizations/$TFC_ORG/workspaces")

          workspace_id=$(echo "$create_response" | jq -r '.data.id')
          echo "‚úÖ Workspace created with ID: $workspace_id"

        elif [[ "$response_code" == "200" ]]; then
          echo "‚úÖ Workspace already exists."
          workspace_id=$(jq -r '.data.id' < workspace_response.json)
          echo "üîé Existing workspace ID: $workspace_id"
        else
          echo "‚ùå Unexpected response (HTTP $response_code)"
          cat workspace_response.json
          exit 1
        fi

        echo "workspace_id=$workspace_id" >> "$GITHUB_OUTPUT"
